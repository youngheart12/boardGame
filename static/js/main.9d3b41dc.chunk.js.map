{"version":3,"sources":["hooks/useLocalStorage.js","component/board/board.js","App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","console","log","setItem","stringify","App","grid","setGrid","React","isUserWon","setIsUserWon","rowIndex","colIndex","activeCell","setActiveCell","isGameCompleted","squareValue","useEffect","flat","every","updateCellValue","sliceGridData","slice","handleKeyDown","useCallback","e","currentDirection","direction","keyCode","document","body","addEventListener","removeEventListener","resetBoardHandler","className","map","row","col","Math","random","onClick","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d3b41dc.chunk.js","sourcesContent":["import { useState } from \"react\";\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n  \n  const setValue = (value) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n        console.log(valueToStore,\"to sote\")\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport \"./board.css\";\n\nconst defaultGameSetup = [\n  [1, 0, 0],\n  [1, 1, 0],\n  [1, 1, 0],\n];\nexport default function App() {\n    \n//   const [grid, setGrid] = React.useState([\n//     [1, 0, 0],\n//     [1, 1, 0],\n//     [1, 1, 0],\n//   ]);\n\n  const [grid,setGrid]=useLocalStorage(\"grid\",[\n  [1, 0, 0],\n  [1, 1, 0],\n  [1, 1, 0],\n])\n  const [isUserWon,setIsUserWon]=React.useState(false);\n\n const [activeCell, setActiveCell] = useLocalStorage(\"active\",{\n        rowIndex:0,\n        colIndex:0\n    })\n\n  const isGameCompleted = (squareValue) => {\n    return squareValue === grid[0][0];\n  };\n\n  React.useEffect(() => {\n    const resultedArray = grid.flat(1);\n    if (resultedArray.every(isGameCompleted)) {\n     setIsUserWon(true);\n    }\n  }, [grid]);\n\n  const updateCellValue = (rowIndex, colIndex) => {\n    console.log(\"coming here to update\");\n    let sliceGridData = grid.slice();\n    sliceGridData[rowIndex][colIndex] = ++sliceGridData[rowIndex][colIndex];\n    setGrid(sliceGridData);\n  };\n\n  const updateActiveCellPosition = (direction) => {\n    if (direction === \"right\") {\n      if (activeCell.colIndex !== 2) {\n        setActiveCell({\n          ...activeCell,\n          colIndex: activeCell.colIndex + 1,\n        });\n        updateCellValue(activeCell.rowIndex, activeCell.colIndex + 1);\n      }\n    }\n    if (direction === \"down\") {\n      if (activeCell.rowIndex !== 2) {\n        setActiveCell({\n          ...activeCell,\n          rowIndex: activeCell.rowIndex + 1,\n        });\n        updateCellValue(activeCell.rowIndex + 1, activeCell.colIndex);\n      }\n    }\n    if (direction === \"left\") {\n      if (activeCell.colIndex !== 0) {\n        setActiveCell({\n          ...activeCell,\n          colIndex: activeCell.colIndex - 1,\n        });\n        updateCellValue(activeCell.rowIndex, activeCell.colIndex - 1);\n      }\n    }\n    if (direction === \"up\") {\n      if (activeCell.rowIndex !== 0) {\n        setActiveCell({\n          ...activeCell,\n          rowIndex: activeCell.rowIndex - 1,\n        });\n        updateCellValue(activeCell.rowIndex - 1, activeCell.colIndex);\n      }\n    }\n  };\n\n  const handleKeyDown = React.useCallback(\n    (e) => {\n      let currentDirection;\n      switch (e.keyCode) {\n        case 37:\n          currentDirection = \"left\";\n          break;\n        case 38:\n          currentDirection = \"up\";\n          break;\n        case 39:\n          currentDirection = \"right\";\n          break;\n        case 40:\n          currentDirection = \"down\";\n          break;\n        default:\n          currentDirection = \"none\";\n      }\n      updateActiveCellPosition(currentDirection);\n    },\n    [activeCell]\n  );\n\n  React.useEffect(() => {\n    document.body.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n\n  const resetBoardHandler = () => {\n    setGrid([[1, 0, 0],\n        [1, 1, 0],\n        [1, 1, 0]]);\n    setActiveCell({\n      ...activeCell,\n      rowIndex: 0,\n      colIndex: 0,\n    });\n  };\n\nconst restartGameHandler=()=>{\n    resetBoardHandler();\n    setIsUserWon(false)\n}\n\n  return (\n      <div>\n          <nav className=\"topNavBar\">\n              <div>\n              Press Any Key On Board To Start Playing  \n              </div>\n             \n              <div>\n              Use Arrow Keys To Play \n              </div>\n          </nav>\n      \n    <div className=\"parentContainer\">\n    \n      <div className=\"boardContainerWrapper\">\n      { !isUserWon && <div className=\"boardColumnWrapper\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"boardRowWrapper\" key={rowIndex}>\n              {row.map((col, colIndex) => (\n                <div\n                  key={colIndex + Math.random(0, 10)}\n                  className={\n                    rowIndex === activeCell.rowIndex &&\n                    colIndex === activeCell.colIndex\n                      ? \"boardActiveCell\"\n                      : \"boardCell\"\n                  }\n                >\n                  {grid[rowIndex][colIndex]}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>}\n        {isUserWon && <div className=\"gameCompleteWrapper\">ðŸŽ‰ ðŸŽŠ\n\n        You Won ! </div>}\n        <div className=\"boardButton\">\n          <button className=\"resetBoardButton\" onClick={isUserWon?restartGameHandler:resetBoardHandler}>\n           {isUserWon?\"RESTART\":\"RESET\"} \n          </button>\n        \n        </div>\n      </div>\n    </div>\n    </div>\n  );\n}\n","import Board from './component/board/board'\nfunction App() {\n  return (\n    <div >\n   <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}